<!-- retain these comments for translator revision tracking -->
<!-- $Id$ -->

 <sect1 condition="bootable-usb" id="boot-usb-files">
 <title>Preparing Files for USB Memory Stick Booting</title>

<para>

To prepare the USB stick, you will need a system where GNU/Linux is
already running and where USB is supported. With current GNU/Linux systems
the USB stick should be automatically recognized when you insert it. If
it is not you should check that the usb-storage kernel module is loaded.
When the USB stick is inserted, it will be mapped to a device named
<filename>/dev/sdX</filename>, where the <quote>X</quote> is a letter
in the range a-z. You should be able to see to which device the USB
stick was mapped by running the command <command>dmesg</command> after
inserting it. To write to your stick, you may have to turn off its write
protection switch.

</para><warning><para>

The procedures described in this section will destroy anything already
on the device! Make very sure that you use the correct device name for
your USB stick. If you use the wrong device the result could be that all
information on for example a hard disk could be lost.

</para></warning>

  <sect2 id="usb-copy-isohybrid" condition="isohybrid-supported">
  <title>Preparing a USB stick using a hybrid CD or DVD image</title>
<para>

Debian CD and DVD images can now be written directly a USB stick,
which is a very easy way to make a bootable USB stick. Simply choose
a CD or DVD image that will fit on your USB stick. See
<xref linkend="official-cdrom"/> to get a CD or DVD image.

</para><para>

Alternatively, 
for very small USB sticks, only a few megabytes in size, you can download
the <filename>mini.iso</filename> image from the <filename>netboot</filename>
directory (at the location mentioned in <xref linkend="where-files"/>).
<footnote>

<para>

A special method can be used to add firmware to the
<filename>mini.iso</filename>. First, write the
<filename>mini.iso</filename> to the USB stick.
Next obtain the necessary firmware files.
See <xref linkend="loading-firmware"/> for more information about firmware.
Now unplug and replug the USB stick, and two partitions should now be visible on it.
You should mount the second of the two partitions, and unpack the firmware onto it.

<informalexample><screen>
# mount /dev/<replaceable>sdX2</replaceable> /mnt
# cd /mnt
# tar zxvf <replaceable>/path/to/</replaceable>firmware.tar.gz
# cd /
# umount
</screen></informalexample>

</para>

</footnote>

</para><para>

The CD or DVD image you choose should be written directly to the USB stick,
overwriting its current contents. For example, when using an existing
GNU/Linux system, the CD or DVD image file can be written to a USB stick
as follows, after having made sure that the stick is unmounted:

<informalexample><screen>
<prompt>#</prompt> <userinput>dd if=<replaceable>debian.iso</replaceable> of=/dev/<replaceable>sdX</replaceable></userinput>
<prompt>#</prompt> <userinput>sync</userinput>
</screen></informalexample>

</para>

  </sect2>

  <sect2 id="usb-copy-easy">
  <title>Manually copying files to the USB stick</title>
<para>

An alternative way to set up your USB stick is to manually copy
the installer files, and also a CD image to it.
Note that the USB stick should be at least 256 MB in size (smaller
setups are possible if you follow <xref linkend="usb-copy-flexible"/>).

</para><para>

There is an all-in-one file <filename>hd-media/boot.img.gz</filename>
which contains all the installer files (including the kernel)
<phrase arch="x86">as well as <classname>syslinux</classname> and its
configuration file</phrase>
<phrase arch="powerpc">as well as <classname>yaboot</classname> and its
configuration file</phrase>.

</para><para>

Note that, although convenient, this method does have one major
disadvantage: the logical size of the device will be limited to 256 MB,
even if the capacity of the USB stick is larger. You will need to
repartition the USB stick and create new file systems to get its full
capacity back if you ever want to use it for some different purpose.
A second disadvantage is that you cannot copy a full CD image onto
the USB stick, but only the smaller businesscard or netinst CD images.

</para><para arch="x86">

To use this image simply extract it directly to your USB stick:

<informalexample><screen>
# zcat boot.img.gz &gt; /dev/<replaceable>sdX</replaceable>
</screen></informalexample>

</para><para arch="powerpc">

Create a partition of type "Apple_Bootstrap" on your USB stick using
<command>mac-fdisk</command>'s <userinput>C</userinput> command and
extract the image directly to that:

<informalexample><screen>
# zcat boot.img.gz &gt; /dev/<replaceable>sdX2</replaceable>
</screen></informalexample>

</para><para>

After that, mount the USB memory stick
<phrase arch="x86">(<userinput>mount
/dev/<replaceable>sdX</replaceable> /mnt</userinput>),</phrase>
<phrase arch="powerpc">(<userinput>mount
/dev/<replaceable>sdX2</replaceable> /mnt</userinput>),</phrase>
which will now have
<phrase arch="x86">a FAT filesystem</phrase>
<phrase arch="powerpc">an HFS filesystem</phrase>
on it, and copy a &debian; netinst or businesscard ISO image to it.
Unmount the stick (<userinput>umount /mnt</userinput>) and you are done.

</para>
  </sect2>

  <sect2 id="usb-copy-flexible">
  <title>Manually copying files to the USB stick &mdash; the flexible way</title>
<para>

If you like more flexibility or just want to know what's going on, you
should use the following method to put the files on your stick. One
advantage of using this method is that &mdash; if the capacity of your
USB stick is large enough &mdash; you have the option of copying a
full CD ISO image to it.

</para>

&usb-setup-x86.xml;
&usb-setup-powerpc.xml;

  </sect2>

 </sect1>
