<!-- retain these comments for translator revision tracking -->
<!-- original version: 65994 -->

 <sect1 condition="supports-tftp" id="install-tftp">
 <title>Dateien vorbereiten für TFTP-Netzwerk-Boot</title>
<para>

Wenn Ihr Rechner mit einem Netzwerk (Local Area Network, LAN) verbunden ist,
sind Sie vielleicht in der Lage, über das Netzwerk per TFTP von einem
anderen Rechner aus zu booten. Wenn Sie dies vorhaben, müssen
die Boot-Dateien in speziellen Verzeichnissen auf diesem entfernten Rechner
abgelegt werden und der Rechner muss für das Booten speziell Ihrer Maschine
konfiguriert werden.

</para><para>

Sie müssen einen TFTP-Server einrichten und in vielen Fällen auch
einen DHCP-Server<phrase condition="supports-rarp"> oder einen
RARP-Server</phrase><phrase condition="supports-bootp"> oder einen
BOOTP-Server</phrase>.

</para><para>

<phrase condition="supports-rarp">Das Reverse-Address-Resolution-Protocol (RARP)
ist eine Möglichkeit, dem Client mitzuteilen, welche IP-Adresse er selbst
verwenden soll. Ein anderer Weg wäre, das BOOTP-Protokoll zu verwenden.</phrase>

<phrase condition="supports-bootp">BOOTP ist ein IP-Protokoll, das einem
Computer seine IP-Adresse mitteilt und wo er im Netzwerk ein Boot-Image
findet.</phrase>

Das Dynamic-Host-Configuration-Protocol (DHCP) ist eine flexiblere,
rückwärts-kompatible Erweiterung von BOOTP. Einige Systeme können nur per
DHCP konfiguriert werden.

</para><para arch="powerpc">

Auf PowerPCs, wenn Sie einen NewWorld-PowerMac haben, ist es eine
gute Idee, DHCP statt BOOTP zu benutzen. Einige der Maschinen der letzten
Generationen können nicht per BOOTP starten.

</para><para arch="hppa">

Einige ältere HPPA-Maschinen (wie z.B. 715/75) funktionieren eher
mit RBOOTD als mit BOOTP. Ein <classname>rbootd</classname>-Paket ist in
&debian; verfügbar.

</para><para>

Das Trivial-File-Transfer-Protocol (TFTP) wird benutzt, um dem Client
das Boot-Image zur Verfügung zu stellen. Theoretisch könnte jeder Server
auf jeder Plattform benutzt werden, der diese Protokolle implementiert hat.
In den Beispielen in diesem Abschnitt geben wir Kommandos für
SunOS 4.x, SunOS 5.x (a.k.a. Solaris) und GNU/Linux an.

<note arch="x86"><para>

Für einen &debian-gnu;-Server empfehlen wir <classname>tftpd-hpa</classname>.
Es wurde vom gleichen Autor geschrieben wie der
<classname>syslinux</classname>-Bootloader und daher ist die Wahrscheinlichkeit,
dass er Probleme verursacht, hierbei wohl am geringsten. Eine gute Alternative
ist <classname>atftpd</classname>.

</para></note>

</para>

&tftp-rarp.xml;
&tftp-dhcp.xml;
&tftp-bootp.xml;

  <sect2 id="tftpd">
  <title>Den TFTP-Server aktivieren</title>
<para>

Um den TFTP-Server einzurichten, sollten Sie als Erstes sicherstellen,
dass <command>tftpd</command> aktiv ist.

</para><para>

Im Falle von <classname>tftpd-hpa</classname> gibt es zwei Wege, auf dem
der Dienst zum Laufen gebracht werden kann. Er kann bei Bedarf vom
<classname>inetd</classname>-Daemon des Systems gestartet werden oder er
kann eingerichtet werden, als eigenständiger Daemon zu laufen. Welche der
beiden Methoden verwendet wird, wird bei der Installation des Pakets ausgewählt
und kann später geändert werden, indem das Paket rekonfiguriert wird.

</para>
<note><para>

Früher haben TFTP-Server das Verzeichnis <filename>/tftpboot</filename>
genutzt, um Images bereitzustellen. Allerdings verwenden Server aus
&debian-gnu;-Paketen unter Umständen andere Verzeichnisse, um den
<ulink url="&url-fhs-home;">Filesystem Hierarchy Standard</ulink>
(Festlegungen, an welcher Stelle im Dateisystem bestimmte Daten abgespeichert
werden sollten) zu erfüllen. Zum Beispiel nutzt <classname>tftpd-hpa</classname>
standardmäßig <filename>/srv/tftp</filename>. Sie müssen also
eventuell die Konfigurationsbeispiele aus diesem Kapitel entsprechend an
Ihre Situation anpassen.

</para></note>
<para>

Alle in &debian; verfügbaren <command>in.tftpd</command>-Alternativen
sollten standardmäßig Protokolleinträge aller TFTP-Anfragen in das
System-Log schreiben. Einige unterstützen das Argument
<userinput>-v</userinput>, um die Ausführlichkeit der Einträge zu
erhöhen. Es wird empfohlen, im Falle von Boot-Problemen diese Logeinträge
zu kontrollieren; sie sind ein guter Anfang, um der Fehlerursache
auf die Spur zu kommen.

</para><para arch="mips">

Wenn Sie vorhaben, &debian; auf einer SGI-Maschine zu installieren, und Ihr
TFTP-Server ist ein GNU/Linux-Rechner mit Linux 2.4, müssen Sie auf dem
Server Folgendes ausführen

<informalexample><screen>
# echo 1 &gt; /proc/sys/net/ipv4/ip_no_pmtu_disc
</screen></informalexample>

um <quote>Path MTU discovery</quote> auszuschalten, andernfalls kann der PROM
des SGI den Kernel nicht herunterladen. Außerdem müssen Sie sicherstellen, dass
TFTP-Pakete von einem Quellport nicht größer als 32767 verschickt werden,
sonst wird der Download nach dem ersten Paket stoppen. Es ist wieder der
Linux-Kernel 2.4.x, der diesen Fehler im PROM auslöst, aber Sie können dies
vermeiden, indem Sie

<informalexample><screen>
# echo "2048 32767" &gt; /proc/sys/net/ipv4/ip_local_port_range
</screen></informalexample>

ausführen; dies stellt den Bereich der Quellports ein, den der
Linux-TFTP-Server benutzt.

</para>
  </sect2>

  <sect2 id="tftp-images">
  <title>Die TFTP-Images an ihren Platz befördern</title>
<para>

Als nächstes legen Sie die TFTP-Boot-Images, die Sie benötigen und die Sie
wie in <xref linkend="where-files"/> beschrieben bekommen können, im
<command>tftpd</command>-Boot-Image-Verzeichnis ab. Sie müssen unter Umständen
einen Link von diesem Image auf die Datei anlegen, die
<command>tftpd</command> benutzt, um einen speziellen Client zu booten.
Bedauerlicherweise hängt der Name dieser Datei von dem TFTP-Client ab und es
gibt dabei keine festen Standards.

</para><para arch="powerpc">

Auf NewWorld-PowerMacs müssen Sie den <command>yaboot</command>-Bootloader
als TFTP-Boot-Image einstellen. <command>Yaboot</command> wird dann
selbst das Kernel- und RAM-Disk-Image per TFTP abrufen. Sie müssen die
folgenden Dateien aus dem <filename>netboot/</filename>-Verzeichnis
herunterladen:

<itemizedlist>
<listitem><para>

<filename>vmlinux</filename>

</para></listitem>
<listitem><para>

<filename>initrd.gz</filename>

</para></listitem>
<listitem><para>

<filename>yaboot</filename>

</para></listitem>
<listitem><para>

<filename>yaboot.conf</filename>

</para></listitem>
<listitem><para>

<filename>boot.msg</filename>

</para></listitem>
</itemizedlist>

</para><para arch="x86">

Alles was Sie benötigen, um per PXE zu booten, ist bereits in dem
<filename>netboot/netboot.tar.gz</filename>-Tarball eingerichtet.
Entpacken Sie den Tarball einfach in das
<command>tftpd</command>-Boot-Image-Verzeichnis. Stellen Sie sicher, dass
der DHCP-Server konfiguriert ist, <filename>pxelinux.0</filename> als
zu bootende Datei zum <command>tftpd</command> weiterzuleiten.

</para><para arch="ia64">

Um per PXE zu booten, müssen Sie nur den
<filename>netboot/netboot.tar.gz</filename>-Tarball einrichten.
Entpacken Sie den Tarball einfach in das
<command>tftpd</command>-Boot-Image-Verzeichnis. Stellen Sie sicher, dass
der DHCP-Server konfiguriert ist, <filename>/debian-installer/ia64/elilo.efi</filename>
als zu bootende Datei zum <command>tftpd</command> weiterzuleiten.

</para>

   <sect3 arch="sparc">
   <title>TFTP-Boot von SPARC-Systemen</title>
<para>

Einige SPARC-Architekturen fügen die Namen der Unterarchitekturen
wie <quote>SUN4M</quote> oder <quote>SUN4C</quote> zum Dateinamen hinzu;
Wenn Sie also ein System der Unterarchitektur SUN4C haben und die IP-Adresse
ist 192.168.1.3, wäre der Dateiname <filename>C0A80103.SUN4C</filename>.
Allerdings gibt es auch Unterarchitekturen, wo die Datei, nach der der
Client sucht, einfach <filename>client-ip-in-hex</filename> ist. Ein
einfacher Weg den Hexadezimal-Code für die IP-Adresse herauszufinden ist,
den folgenden Befehl in eine Shell einzugeben (angenommen, die IP-Adresse
der Maschine wäre 10.0.0.4):

<informalexample><screen>
$ printf '%.2x%.2x%.2x%.2x\n' 10 0 0 4
</screen></informalexample>

Um den korrekten Dateinamen zu bekommen, müssen Sie alle Buchstaben
in Großbuchstaben ändern und falls nötig den Namen der Unterarchitektur
hinzufügen.

</para><para>

Wenn Sie all dies korrekt erledigt haben, sollte der Befehl
<userinput>boot net</userinput> unter OpenPROM das Image laden. Falls das
Image nicht gefunden werden kann, versuchen Sie, die Protokolle auf Ihrem
tftp-Server zu kontrollieren, um herauszufinden, welcher Image-Name
angefordert wurde.

</para><para>

Manche Sparc-Systeme kann man zwingen, nach einem bestimmten Dateinamen
zu suchen, indem man ihn ans Ende des OpenPROM-Boot-Befehls anhängt, z.B.
<userinput>boot net my-sparc.image</userinput>. Die Datei muss dabei immer
in dem Verzeichnis liegen, in dem der TFTP-Server sucht.

</para>
   </sect3>

   <sect3 arch="mips">
   <title>TFTP-Boot von SGI-Systemen</title>
<para>

Auf SGI-Maschinen können Sie sich auf den <command>bootpd</command>-Dienst
verlassen, um den Namen der TFTP-Datei festzulegen. Er wird entweder als
Wert für <userinput>bf=</userinput> in <filename>/etc/bootptab</filename>
oder als Angabe für <userinput>filename=</userinput> in
<filename>/etc/dhcpd.conf</filename> angegeben.

</para>
   </sect3>

  </sect2>

<!-- FIXME: commented out since it seems too old to be usable and a current
            way is not known
            !!! Leaving this part untranslated for the same reason. H. Wansing

  <sect2 id="tftp-low-memory">
  <title>TFTP Installation for Low-Memory Systems</title>
<para>

On some systems, the standard installation RAMdisk, combined with the
memory requirements of the TFTP boot image, cannot fit in memory.  In
this case, you can still install using TFTP, you'll just have to go
through the additional step of NFS mounting your root directory over
the network as well.  This type of setup is also appropriate for
diskless or dataless clients.

</para><para>

First, follow all the steps above in <xref linkend="install-tftp"/>.

<orderedlist>
<listitem><para>

Copy the Linux kernel image on your TFTP server using the
<userinput>a.out</userinput> image for the architecture you are
booting.

</para></listitem>
<listitem><para>

Untar the root archive on your NFS server (can be the same system as
your TFTP server): 

<informalexample><screen>
# cd /tftpboot
# tar xvzf root.tar.gz
</screen></informalexample>

Be sure to use the GNU <command>tar</command> (other tar programs, like the
SunOS one, badly handle devices as plain files).

</para></listitem>
<listitem><para>

Export your <filename>/tftpboot/debian-sparc-root</filename> directory
with root access to your client.  E.g., add the following line to
<filename>/etc/exports</filename> (GNU/Linux syntax, should be similar
for SunOS):

<informalexample><screen>
/tftpboot/debian-sparc-root <replaceable>client</replaceable>(rw,no_root_squash)
</screen></informalexample>

NOTE: <replaceable>client</replaceable> is the host name or IP address recognized
by the server for the system you are booting.

</para></listitem>
<listitem><para>

Create a symbolic link from your client IP address in dotted notation
to <filename>debian-sparc-root</filename> in the
<filename>/tftpboot</filename> directory.  For example, if the client
IP address is 192.168.1.3, do

<informalexample><screen>
# ln -s debian-sparc-root 192.168.1.3
</screen></informalexample>

</para></listitem>
</orderedlist>

</para>

  </sect2>

  <sect2 condition="supports-nfsroot">
  <title>Installing with TFTP and NFS Root</title>
<para>

Installing with TFTP and NFS Root is similar to 
<xref linkend="tftp-low-memory"/> because you don't want to 
load the RAMdisk anymore but boot from the newly created NFS-root file
system.  You then need to replace the symlink to the tftpboot image by
a symlink to the kernel image (for example,
<filename>linux-a.out</filename>).

</para><para>

RARP/TFTP requires all daemons to be running on the same server (the
workstation is sending a TFTP request back to the server that replied
to its previous RARP request).

</para>


  </sect2>
END FIXME -->
 </sect1>
