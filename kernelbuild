#/usr/bin/env bash

set -e
set -x

usage () { echo "usage: `basename $0` kernver zfsver" ; return 0 ; }
usageerr () { usage >&2 ; return 1 ; }

[ $# -eq 2 ] || usageerr

UPSTREAM="$1"
ZFSVER="$2"

ABI=1
KVERS="$UPSTREAM-$ABI"
DEBKEY=AAE15FF2

export DEBFULLNAME="Nick Black"
export DEBEMAIL="<nick.black@sprezzatech.com>"

# Linux kernel
cd "/linux-$UPSTREAM"

cd debian/installer/amd64
kernel-wedge gen-control $KVERS >> ../../control
cd -

# This must be run twice. The first time, it intentionally fails. Don't
# believe me? Run it yourself and see.
make -f debian/rules debian/control-real || true # Creates Source: entry in /control

make -f debian/rules clean
python debian/bin/genorig.py "/linux-$UPSTREAM.tar.bz2"
debian/rules orig

# rebuild the abi FIXME
# FIXME ugh
sed -i -e"s/3.4.0-1/$KVERS/g" debian/bin/patch.apply
sed -i -e"s/3.4.0-1/$KVERS/g" debian/rules.gen
sed -i -e"s/3.4.0-1/$KVERS/g" debian/control

dpkg-buildpackage -j8 -k$DEBKEY
cp debian/config/kernelarch-x86/config-arch-64 .config
make oldconfig
make -j8 bzImage modules

ln -s "/linux-$UPSTREAM" /buildkernel

git clone https://github.com/zfsonlinux/spl.git spl-$ZFSVER
git clone https://github.com/zfsonlinux/zfs.git zfs-$ZFSVER
cd /spl-"$ZFSVER"
tar -cjvf ../spl_$ZFSVER.orig.tar.bz2 -C.. spl-$ZFSVER
cp -r /world/spl debian
dpkg-buildpackage -j8 -k$DEBKEY
cd /zfs-"$ZFSVER"
tar -cjvf ../zfs_$ZFSVER.orig.tar.bz2 -C.. zfs-$ZFSVER
cp -r /world/zfs debian
dpkg-buildpackage -j8 -k$DEBKEY

# Our packages are in the toplevel...send them to the repository.
