#/bin/sh

set -e

# FIXME get kernel version as parameter

CODENAME=sid
ZFSVER=0.6.0~rc9

usage () { echo "usage: `basename $0` [ -f ] iso" ; return 0; }
usageerr () { usage >&2 ; return 1 ; }

if [ $# -lt 1 ] ; then
	usageerr
else
	[ $# -lt 3 ] || usageerr
	if [ $# -eq 2 ] ; then
		if [ "$1" = "-f" ] ; then
			shift
		elif [ "$2" != "-f" ] ; then
			usageerr
		fi
		echo -n "Cleaning up old files..."
		rm -rf images tmp
		echo
	elif [ "$1" = "-f" ] ; then
		echo "Not allowing ISO name of -f" >&2
		usageerr
	fi
fi

ISO="$1"

if [ "`readlink -e \`dirname $ISO\``" = "`readlink -e images`" ] ; then
	echo "Warning; won't place output in images/." >&2
	usageerr
fi

DI="`pwd`/unstable/d-i/debian-installer_20120509_amd64.deb"
KPKGS="`pwd`/unstable/linux-image-3.4.2-1-amd64_3.4.2-1_amd64.deb"
KPKGS="$KPKGS,`pwd`/unstable/linux-image-3.4.2-1-amd64-dbg_3.4.2-1_amd64.deb"
PKGS="$DI,`pwd`/unstable/d-i/installer/build/localudebs,`pwd`/unstable/spl_$ZFSVER-1_amd64.deb,`pwd`/unstable/zfs_$ZFSVER-1_amd64.deb"
for i in unstable/apt_0.9.5.1+nmu1_amd64.deb unstable/apt-doc_0.9.5.1+nmu1_all.deb unstable/apt-transport-https_0.9.5.1+nmu1_amd64.deb unstable/apt-utils_0.9.5.1+nmu1_amd64.deb unstable/libapt-inst1.5_0.9.5.1+nmu1_amd64.deb unstable/libapt-pkg4.12_0.9.5.1+nmu1_amd64.deb unstable/libapt-pkg-dev_0.9.5.1+nmu1_amd64.deb unstable/libapt-pkg-doc_0.9.5.1+nmu1_all.deb ; do
	PKGS="$PKGS,`pwd`/$i"
done
PKGS="$PKGS,$KPKGS"

for i in `echo $KPKGS | tr , \  ` ; do
	[ -r "$i" ] || { echo "Kernel package $i didn't exist." >&2 ; exit 1; }
done
for i in `echo $PKGS | tr , \  ` ; do
	[ -r "$i" ] || { echo "Package $i didn't exist." >&2 ; exit 1; }
done
[ -r "$DI" ] || { echo "D-I package $DI didn't exist." >&2 ; exit 1; }

mkdir -p tmp/mirror/dists/"$CODENAME"/main/installer-amd64/current/images/

cp -r dest/* tmp/mirror/dists/"$CODENAME"/main/installer-amd64/current/images/
simple-cdd --dist "$CODENAME" --profiles SprezzOS -b SprezzOS --auto-profiles SprezzOS \
	--local-packages "$PKGS" --kernel-packages "$KPKGS"

GBOOTFILES="unicode.pf2 splash.png"

for i in $GBOOTFILES ; do
	[ -r "$i" ]
done

grubify () {
	set -e
	# without these conservative options, we sometimes get corrupted udebs
	fuseiso images/*iso "$tmp"
	mkdir -p "$tmp2/boot/grub"
	cp grub.cfg "$tmp2/boot/grub"
	cp memtest86+.bin dest/cdrom/vmlinuz dest/cdrom/initrd.gz "$tmp2"
	cp $GBOOTFILES "$tmp2/boot"
	grub-mkrescue --modules="linux iso9660 fshelp gpt_part font loopback ls gfxterm vbe2 boot pc" -o "$ISO" -U "$tmp" "$tmp2"
}

cleancd () {
	fusermount -u "$tmp"
	rmdir "$tmp"
	rm -rf "$tmp2"
}

tmp="`mktemp -d`"
tmp2="`mktemp -d`"
grubify || { cleancd ; exit 1 ; }
cleancd

exit 0
