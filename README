<<<<<<< HEAD
http://www.sprezzatech.com/sprezzos.html

This repository builds and tests SprezzOS install media.

Dependencies
------------

Building requires GNU make, debootstrap, grub2-pc, grub2-efi, dh-di,
 fuseiso9660, simple-cdd and probably a few other things. Building with a
 decent level of parallelism (-j4) is recommended.

Building SPL/ZFS requires uuid-dev, libz-dev, and autoconf. Note that ZFS
 requires a *non*-preemptive kernel (CONFIG_PREEMPT=n).

Testing adds a dependency on KVM.

Building
--------

The Makefile ought, depending on the day of the week, go through the entire
(lengthy) CD build process without user interaction. During any serious
development, you'll likely find yourself using the following:

Run './update' to regenerate the tarball of upstream packages and fonts.

Run './build <builddir>' to generate the chroot at <builddir>. If you get an
error about signature verification failures, try running './update'.

Run './makecd' to generate the CD.

Run './runcd kvmdiskimg isoimage' to test the CD.

Notes
-----

Working with simple-cdd/debian-installer is not very pleasant. Building
SprezzOS involves:

 - creating a clean environment for building, using debootstrap
 - rebuilding the installer kernel's various udebs and debs
 - building udebs of external modules for the installer kernel (SPL, ZFS)
 - building udebs of partman extensions (partman-zfs)
 - rebuilding the debian-installer udeb to use these udebs
 - building a cd using these various packages, using simple-cdd

Tools you need to know beyond standard dev:

 - the Debian packaging system (a package's debian/), fairly intimately
 - debian-installer internals
 - debhelper
 - debconf
 - the Debian kernel packaging system (kernel-wedge, etc)
 - Partman, the installer's partitioning software
 ___________
|debootstrap|
 -----------

This is pretty simple. We use the buildd variant with a bunch of extra
packages. In a pretty dick move, we create a symlink from /usr/bin/mklibs-copy
to /usr/local/bin/mklibs, shadowing the main mklibs (this is a workaround for
ZFS/SPL-related barfing during library size reduction, and should go -- we
ought only include .ko's in the kernel udebs FIXME).

 ______
|kernel|
 ------

We are not using kernel-package's "make-kpkg" to build .debs, but instead the
preexisting debian/ directory and dpkg-buildpackage. The result will be a
great many udebs and some debs.

Acquire the desired kernel via git or tarball. Acquire the debian packaging
from svn://svn.debian.org/svn/kernel/dists/trunk/linux-2.6/debian/. Configure
the kernel. Run 'make deb-pkg'.

Finally, run dpkg-buildpackage to generate the various udebs.

FIXME (considerations include: ABI updates, removing/adding entries to module
	config files in debian/config/, copying config through
	debian/config/config, setting defines, generating usable header
	packages for the next stage...)

 ________________
|external modules|
 ----------------

You'll need access to the headers for the appropriate kernel. If you're using
the default kernel, just install its kernel-headers packages. Otherwise, you'll
need install the kernel-headers package generated in your kernel-building step.
Modify the debian/rules file to ensure configuration steps are using the
correct kernel locations. You need build a kernel module udeb for the installer
and then regular packages for the post-install environment.
 _______
|partman|
 -------

FIXME (considerations include: you won't show up in the partman config unless
	your filesystem module tests pass; /var/log/partman is created once
	partman starts running...)
 _____
|udebs|
 -----

.udeb files are generated by ensuring

	XC-Package-Type: udeb
	Section: debian-installer

is in the package's entry in the debian/control file.

If the udeb belongs in the main menu, it needs have a

	XB-Installer-Menu-Item: 99999

line. 99999 places the entry at the bottom, and keeps it from being run as part
of a typical install. udebs ought carry as little baggage around as possible.

udebs need be placed in build/localudebs within a debian-installer source
checkout. dpkg-buildpackages will ensure the necessary Packages/Packages.gz
files are updated according to this directory's contents. They then need be
included in a processed build/pkg-list/ file. "local" is provided for our use.
${kernel:Version} will be substituted with the kernel version of the installer.
Dependencies needn't (and oughtn't) be listed in pkg-list/local.

 ________________
|debian-installer|
 ----------------

You'll need be able to build a debian-installer checkout. Check it out from
svn, or use "apt-get source debian-installer". dpkg-checkbuilddeps in a
debian-installer checkout will ensure you have the necessary packages
installed to rebuild it. The svn repo is:

	svn://svn.debian.org/svn/d-i/trunk
	cd trunk
	scripts/git-setup
	mr -p checkout

Edit build/config/common as necessary. If you want external apt sources, create
a new file sources.list.udeb.local. Ensure the first line is

	deb copy:/debian-installer-20120327/build/ localudebs/

in order to use your localudebs.

 __________
|simple-cdd|
 ----------

Once you've built your custom debian-installer, simple-cdd can be used to
generate installation media. You'll need to copy the contents of build/dest/
from within the installer manually, and there appears no way to do way to do
this better than:

	mkdir -p tmp/mirror/dists/sid/main/installer-amd64/current/images/
	cp -r dest/* tmp/mirror/dists/sid/main/installer-amd64/current/images/

where tmp/blahblahblah is a string extracted from reading simple-cdd source
code. This is all unfortunate.

Create a profiles/ directory, and populate it. Read the source for examples;
it's all too depressing to talk about.

 _____________
|grubification|
 -------------

simple-cdd sets up an ISO9660 image booting with ISOLINUX. For a number of
reasons, we want to use grub2 instead:

 - better graphics support
 - more flexible
 - unified pre- and post-install bootloader environment
 - EFI support
 - one braindamaged bootloader is quite enough, thanks

The 'grubify()' function in makecd mounts simple-cdd's output using FUSE and
fuseiso9660, adds some files used during bootloading, and runs 'grub-mkrescue'
to make a new ISO using GRUB2 as its bootloader.
=======
README for the fireware test suite
==================================

Well, you got this far, which is a good thing.  

Quick Start Guide
=================

1) Dependencies: iasl, acpidump pciutils dmidecode

Please first install iasl and acpidump:

sudo apt-get install iasl acpidump pciutils dmidecode

2) To build and install (only if building from source)

./configure
make
sudo make install

I hope to get this into a PPA once I've got the code into a more
stable form.

To get help:

fwts --help

To run all the tests (including S3 and S4 suspend/resume hibernate/resume tests) use:

fwts

..this will dump the results into results.log


Advanced Options Guide
======================

Running Specific Tests
----------------------

Run specific tests, e.g. check syntax of DSDT:

sudo fwts syntaxcheck

You can run multiple tests too:

sudo fwts syntaxcheck fan batttery

To see all the available tests:

sudo fwts --show-tests

Changing the output
-------------------

To dump the results to another file:

sudo fwts --results-output=myresults.log

or to stderr or stdout and redirect:

sudo fwts --results-output=stderr
sudo fwts --results-output=stdout > mylog.log

The log has various columns:

0001 17/05/10 15:00:48 wakealarm       Test ACPI Wakealarm.
0002 17/05/10 15:00:48 wakealarm       ------------------------------------------------------------------------------------------
0003 17/05/10 15:00:48 wakealarm       Check existance of /sys/class/rtc/rtc0/wakealarm.
0004 17/05/10 15:00:48 wakealarm       PASSED: test 1, Check existance of /sys/class/rtc/rtc0/wakealarm.
0005 17/05/10 15:00:48 wakealarm       Trigger RTC wakealarm.
0006 17/05/10 15:00:48 wakealarm       Trigger wakealarm for 1 seconds in the future.
0007 17/05/10 15:00:48 wakealarm       PASSED: test 2, Trigger RTC wakealarm.
0008 17/05/10 15:00:48 wakealarm       Check if wakealarm is fired.
0009 17/05/10 15:00:48 wakealarm       Trigger wakealarm for 2 seconds in the future.
0010 17/05/10 15:00:51 wakealarm       PASSED: test 3, Check if wakealarm is fired.
0011 17/05/10 15:00:51 wakealarm       Multiple wakealarm firing tests.
0012 17/05/10 15:00:51 wakealarm       Trigger wakealarm for 1 seconds in the future.
0013 17/05/10 15:00:53 wakealarm       Trigger wakealarm for 2 seconds in the future.
0014 17/05/10 15:00:56 wakealarm       Trigger wakealarm for 3 seconds in the future.
0015 17/05/10 15:01:00 wakealarm       Trigger wakealarm for 4 seconds in the future.
0016 17/05/10 15:01:05 wakealarm       PASSED: test 4, Multiple wakealarm firing tests.
0017 17/05/10 15:01:05 wakealarm       ==========================================================================================
0018 17/05/10 15:01:05 wakealarm       4 passed, 0 failed, 0 warnings, 0 aborted.
0019 17/05/10 15:01:05 wakealarm       ==========================================================================================

^    ^        ^        ^
|    |        |        |
|    |        |        +--- %owner (name of test that ran)
|    |        |
|    |        +--- %time
|    |
|    +--- %date 
|
+--- %line (line number)

Also, there is an optional %field that indicates the type of message being logged:

sudo fwts wakealarm --log-format="%line %data %time %field %owner"

generates results.log containing:

0001 data 15:05:13 HED wakealarm      Test ACPI Wakealarm.
0002 data 15:05:13 SEP wakealarm      -------------------------------------------------------------------------------------------
0003 data 15:05:13 INF wakealarm      Check existance of /sys/class/rtc/rtc0/wakealarm.
0004 data 15:05:13 RES wakealarm      PASSED: test 1, Check existance of /sys/class/rtc/rtc0/wakealarm.
0005 data 15:05:13 INF wakealarm      Trigger RTC wakealarm.
0006 data 15:05:13 INF wakealarm      Trigger wakealarm for 1 seconds in the future.
0007 data 15:05:13 RES wakealarm      PASSED: test 2, Trigger RTC wakealarm.
0008 data 15:05:13 INF wakealarm      Check if wakealarm is fired.
0009 data 15:05:13 INF wakealarm      Trigger wakealarm for 2 seconds in the future.
0010 data 15:05:16 RES wakealarm      PASSED: test 3, Check if wakealarm is fired.
0011 data 15:05:16 INF wakealarm      Multiple wakealarm firing tests.
0012 data 15:05:16 INF wakealarm      Trigger wakealarm for 1 seconds in the future.
0013 data 15:05:18 INF wakealarm      Trigger wakealarm for 2 seconds in the future.
0014 data 15:05:21 INF wakealarm      Trigger wakealarm for 3 seconds in the future.
0015 data 15:05:25 INF wakealarm      Trigger wakealarm for 4 seconds in the future.
0016 data 15:05:30 RES wakealarm      PASSED: test 4, Multiple wakealarm firing tests.
0017 data 15:05:30 SEP wakealarm      ===========================================================================================
0018 data 15:05:30 SUM wakealarm      4 passed, 0 failed, 0 warnings, 0 aborted.
0019 data 15:05:30 SEP wakealarm      ===========================================================================================
                    ^
                    |
 +------------------+
 |
HED = heading
INF = information fields
SEP = separator (just pretty printing)
RES = result (PASSED or FAILED)
SUM = summary
ERR = error (something fatal happened!)
WRN = warning (not a critical failure, but may need looking at)
DBG = debug output
NLN = new line (empty field)

use fwts --log-fields to show all available fields

One can filter on these fields using --log-filter, e.g.

sudo fwts --log-filter=RES,SUM  
    .. just collect results and summary of tests

sudo fwts --log-filter=ALL,~SEP
    .. all fields except the separators

..it's quite flexible!

One can also re-arrange or modify the log format using --log-format, e.g.

sudo fwts --log-format="%line %field %time: "  mtrr

this produces:

0001 HED 15:08:38: MTRR validation.
0002 SEP 15:08:38: --------------------------------------------------------------------------------------------------------------
0003 INF 15:08:38: MTRR overview
0004 INF 15:08:38: -------------
0005 INF 15:08:38: 0x00000000 - 0x80000000   write-back
0006 INF 15:08:38: 0x80000000 - 0xc0000000   write-back
0007 INF 15:08:38: 0xbf700000 - 0xbf800000   uncached
0008 INF 15:08:38: 0xbf800000 - 0xc0000000   uncached
0009 INF 15:08:38: 0xd0000000 - 0xe0000000   write-combining
0010 INF 15:08:38:
0011 INF 15:08:38: This test validates the MTRR IOMEM setup.
0012 RES 15:08:38: FAILED [MEDIUM]: test 1, Memory range 0xd0000000 to 0xdfffffff (0000:00:02.0) has incorrect attribute
0013 RES 15:08:38: write-combining
0014 INF 15:08:39: This test validates the MTRR setup across all processors.
0015 RES 15:08:39: PASSED: test 2, All processors have the MTRR setup
0016 SEP 15:08:39: ==============================================================================================================
0017 SUM 15:08:39: 1 passed, 1 failed, 0 warnings, 0 aborted.
0018 SEP 15:08:39: ==============================================================================================================


Available fields are:

%line   - log line number
%time	- current time
%date 	- current date
%owner  - name of the test program (the owner of the the current test)
%field  - the 3 letter record identifier field (e.g. SEP, RES, etc..)

Test Progress Feedback
======================

Use the --show-progress to dump out the test progress to stderr. Output is as follows:

mtrr                : Test 1 of 2 started
mtrr                : Test 1 of 2 completed (0 passed, 1 failed, 0 aborted)
mtrr                : Test 2 of 2 started
mtrr                : Test 2 of 2 completed (1 passed, 0 failed, 0 aborted)
  ^
  test name            ^ progress info

It's a bit crude at the moment!


PASSED or FAILED?
=================

The --stdout-summary flag outputs to stdout PASSED or FAILED if test(s) passed or failed. It's essentially
for one-shot test modes where you want to run one test and see if it passed or failed without having to
look at the results log, e.g.

sudo fwts mtrr --stdout-summary

One can override the text using the following environment variables:

BIOS_TEST_TOOLKIT_PASSED_TEXT
BIOS_TEST_TOOLKIT_FAILED_TEXT

e.g.

sudo BIOS_TEST_TOOLKIT_PASSED_TEXT="yay" fwts mtrr --stdout-summary
yay

Finally, the exit code returns 1 for test failure and 0 for test success, so the
test suite can be run from a shell script and one can detect if the test worked or not, e.g.

#!/bin/bash
LOG=stdout
sudo fwts dmi_decode --results-output=$LOG
failed=$?

Misc
====

Debug mode.. shows what the controlling test suite framework is doing. It's for
the developer only!

fwts --fwts-debug
>>>>>>> 634953560de2ccdb69a9297b3a7f041cd548a7e8
