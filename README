http://www.sprezzatech.com/sprezzos.html

This repository builds and tests SprezzOS install media.

Dependencies
------------

Building requires GNU make, debootstrap, dh-di, and simple-cdd. Building with
 a decent level of parallelism (-j4) is recommended.

Building SPL/ZFS requires uuid-dev, libz-dev, autoconf and alien. Note that
 ZFS requires a *non*-preemptive kernel (CONFIG_PREEMPT=n).

Testing adds a dependency on KVM.

Building
--------

Run './update' to generate a tarball of upstream packages.

Run './build <builddir>' to generate the chroot at <builddir>. If you get an
error about signature verification failures, try running './update'.


Notes
-----

Working with simple-cdd/debian-installer is not very pleasant. Building
SprezzOS involves:

 - creating a clean environment for building, using debootstrap
 - rebuilding the installer kernel's various udebs and debs
 - building udebs of external modules for the installer kernel (SPL, ZFS)
 - building udebs of partman extensions (partman-zfs)
 - rebuilding the debian-installer udeb to use these udebs
 - building a cd using these various packages, using simple-cdd

Tools you need to know beyond standard dev:

 - the Debian packaging system (a package's debian/), fairly intimately
 - debian-installer internals
 - debhelper
 - debconf
 - the Debian kernel packaging system (kernel-wedge, etc)
 - Partman, the installer's partitioning software
 ___________
|debootstrap|
 -----------

This is pretty simple. We use the buildd variant with a bunch of extra
packages. In a pretty dick move, we create a symlink from /usr/bin/mklibs-copy
to /usr/local/bin/mklibs, shadowing the main mklibs (this is a workaround for
ZFS/SPL-related barfing during library size reduction, and should go -- we
ought only include .ko's in the kernel udebs FIXME).

 ______
|kernel|
 ------

We are not using kernel-package's "make-kpkg" to build .debs, but instead the
preexisting debian/ directory and dpkg-buildpackage. The result will be a
great many udebs and some debs.

FIXME (considerations include: ABI updates, removing/adding entries to module
	config files in debian/config/, copying config through
	debian/config/config, setting defines, generating usable header
	packages for the next stage...)

 ________________
|external modules|
 ----------------

You'll need access to the headers for the appropriate kernel. If you're using
the default kernel, just install its kernel-headers packages. Otherwise, you'll
need install the kernel-headers package generated in your kernel-building step.
Modify the debian/rules file to ensure configuration steps are using the
correct kernel locations. You need build a kernel module udeb for the installer
and then regular packages for the post-install environment.
 _______
|partman|
 -------

FIXME (considerations include: you won't show up in the partman config unless
	your filesystem module tests pass; /var/log/partman is created once
	partman starts running...)
 _____
|udebs|
 -----

.udeb files are generated by ensuring

	XC-Package-Type: udeb
	Section: debian-installer

is in the package's entry in the debian/control file.

If the udeb belongs in the main menu, it needs have a

	XB-Installer-Menu-Item: 99999

line. 99999 places the entry at the bottom, and keeps it from being run as part
of a typical install. udebs ought carry as little baggage around as possible.

udebs need be placed in build/localudebs within a debian-installer source
checkout. dpkg-buildpackages will ensure the necessary Packages/Packages.gz
files are updated according to this directory's contents. They then need be
included in a processed build/pkg-list/ file. "local" is provided for our use.
${kernel:Version} will be substituted with the kernel version of the installer.
Dependencies needn't (and oughtn't) be listed in pkg-list/local.

 ________________
|debian-installer|
 ----------------

You'll need be able to build a debian-installer checkout. Check it out from
svn, or use "apt-get source debian-installer". dpkg-checkbuilddeps in a
debian-installer checkout will ensure you have the necessary packages
installed to rebuild it. The svn repo is:

	svn://svn.debian.org/svn/d-i/trunk

Edit build/config/common as necessary. If you want external apt sources, create
a new file sources.list.udeb.local. Ensure the first line is

	deb copy:/debian-installer-20120327/build/ localudebs/

in order to use your localudebs.
